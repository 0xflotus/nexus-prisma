import { core } from 'nexus'
import {
  GetGen,
  GetGen2,
  GetGen3,
  PrismaGenTypesShape,
  PrismaShapeKeys,
} from './typesHelpers'

export type InputField<
  GraphQLType extends PrismaShapeKeys,
  TypeName extends string
> = NexusPrismaGen extends infer GenTypes
  ? GenTypes extends PrismaGenTypesShape
    ? GraphQLType extends keyof GenTypes
      ? 'fields' extends infer Fields
        ? Fields extends keyof GenTypes[GraphQLType]
          ? TypeName extends keyof GenTypes[GraphQLType][Fields]
            ? GenTypes[GraphQLType][Fields][TypeName]
            : any
          : any
        : any
      : any
    : any
  : any

export type PrismaObjectTypeNames = Extract<
  keyof GetGen2<'objectTypes', 'fields'>,
  string
>

export type PrismaInputObjectTypeNames = Extract<
  keyof GetGen2<'inputTypes', 'fields'>,
  string
>

export type PrismaEnumTypeNames = Extract<
  keyof GetGen<'enumTypes', any>,
  string
>

export type PrismaEnumTypeValues<TypeName extends string> = GetGen2<
  'enumTypes',
  TypeName
>

export type ObjectTypeDetails<TypeName extends string> = GetGen3<
  'objectTypes',
  'fieldsDetails',
  TypeName
>

export interface PickInputField<
  GraphQLType extends PrismaShapeKeys,
  TypeName extends string
> {
  pick: InputField<GraphQLType, TypeName>[]
}

export interface FilterInputField<
  GraphQLType extends PrismaShapeKeys,
  TypeName extends string
> {
  filter: ((fields: string[]) => string[]) | InputField<GraphQLType, TypeName>[]
}

export type AddFieldInput<
  GraphQLType extends PrismaShapeKeys,
  TypeName extends string
> =
  | InputField<GraphQLType, TypeName>[]
  | PickInputField<GraphQLType, TypeName>
  | FilterInputField<GraphQLType, TypeName>

export type ObjectField = {
  name: string
  args?: string[] | false
  alias?: string
}
export type AnonymousField = string | ObjectField
export interface AnonymousPickOmitField {
  pick?: AnonymousField[]
  omit?: AnonymousField[]
}
export type AnonymousInputFields = AnonymousField[] | AnonymousPickOmitField

export interface PrismaOutputOpts
  extends core.Omit<
    core.FieldOutConfig<string, string>,
    'args' | 'deprecation' | 'resolve'
  > {
  args: Record<string, core.NexusArgDef<string>>
  resolve: (root: any, args: any, ctx: any) => any
}

export type PrismaOutputOptsMap = Record<string, PrismaOutputOpts>

export interface PrismaSchemaConfig extends core.BuilderConfig {
  types?: any
  prisma: {
    /**
     * The default exported object generated by `nexus-prisma-generate`
     *
     * Import it from the output directory generated by `nexus-prisma-generate`
     * @example
     * ```
     * import nexusPrismaConfig from './generated/nexus-prisma'
     *
     * makePrismaSchema({
     *   prisma: {
     *     schemaConfig: nexusPrismaConfig
     *   }
     * })
     * ```
     */
    nexusPrismaSchema: {
      uniqueFieldsByModel: Record<string, string[]>
      schema: { __schema: any }
    }
    /**
     * The name of the prisma-client that you injected in your GraphQL server context
     */
    contextClientName: string
  }
}
