### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Bubble {
  createdAt: DateTime!
  id: UUID!
  members(first: Int, orderBy: BubbleMembersOrderBy, where: BubbleMembersWhere): [User!]
}

input BubbleMembersOrderBy {
  firstName: OrderByArg
}

input BubbleMembersWhere {
  id: StringFilter
}

input BubbleWhere {
  AND: [BubbleWhere!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  members: UserFilter
  NOT: [BubbleWhere!]
  OR: [BubbleWhere!]
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

enum OrderByArg {
  asc
  desc
}

type Post {
  authors(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

input PostFilter {
  every: PostWhere
  none: PostWhere
  some: PostWhere
}

input PostOrderBy {
  id: OrderByArg
  rating: OrderByArg
}

input PostWhere {
  AND: [PostWhere!]
  authors: UserFilter
  id: IntFilter
  NOT: [PostWhere!]
  OR: [PostWhere!]
  rating: FloatFilter
}

type Query {
  user(where: UserWhereUnique!): User
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  firstName: String!
  id: ID!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderBy, skip: Int, where: PostWhere): [Post!]
}

input UserFilter {
  every: UserWhere
  none: UserWhere
  some: UserWhere
}

input UserWhere {
  AND: [UserWhere!]
  bubble: BubbleWhere
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserWhere!]
  OR: [UserWhere!]
  posts: PostFilter
}

input UserWhereUnique {
  id: ID
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
