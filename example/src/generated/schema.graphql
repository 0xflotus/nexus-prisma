### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Author {
  blog: Blog!
  id: Int!
  name: String
  posts(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): [CustomPost!]
}

input AuthorCreateManyWithoutAuthorsInput {
  connect: [AuthorWhereUniqueInput!]
  create: [AuthorCreateWithoutBlogInput!]
}

input AuthorCreateOneWithoutAuthorInput {
  connect: AuthorWhereUniqueInput
  create: AuthorCreateWithoutPostsInput
}

input AuthorCreateWithoutBlogInput {
  createdAt: DateTime
  name: String
  posts: PostCreateManyWithoutPostsInput
  rating: Float!
  updatedAt: DateTime
}

input AuthorCreateWithoutPostsInput {
  blog: BlogCreateOneWithoutBlogInput!
  createdAt: DateTime
  name: String
  rating: Float!
  updatedAt: DateTime
}

input AuthorWhereUniqueInput {
  id: Int
}

type Blog {
  authors(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): [Author!]
  createdAt: DateTime!
  id: Int!
  name: String!
  posts(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: BlogPostsOrderByInput
    skip: Int
    where: BlogPostsWhereInput
  ): [CustomPost!]
  updatedAt: DateTime!
  viewCount: Int!
}

input BlogCreateInput {
  authors: AuthorCreateManyWithoutAuthorsInput
  createdAt: DateTime
  name: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  viewCount: Int!
}

input BlogCreateOneWithoutBlogInput {
  connect: BlogWhereUniqueInput
  create: BlogCreateWithoutAuthorsInput
}

input BlogCreateWithoutAuthorsInput {
  createdAt: DateTime
  name: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  viewCount: Int!
}

input BlogPostsOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input BlogPostsWhereInput {
  title: StringFilter
}

input BlogWhereUniqueInput {
  id: Int
}

type CustomPost {
  id: Int!
  tags: [String!]!
  title: String!
}

"""
DateTime
"""
scalar DateTime

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneBlog(data: BlogCreateInput!): Blog!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutBlogInput!]
}

input PostCreatetagsInput {
  set: [String!]
}

input PostCreateWithoutBlogInput {
  author: AuthorCreateOneWithoutAuthorInput
  tags: PostCreatetagsInput
  title: String!
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  authors(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
    where: QueryFindManyAuthorWhereInput
  ): [Author!]
  blog(where: BlogWhereUniqueInput!): Blog
  blogs: [Blog!]
  posts(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: QueryFindManyPostOrderByInput
    skip: Int
    where: QueryFindManyPostWhereInput
  ): [CustomPost!]
}

input QueryFindManyAuthorFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyAuthorWhereInput {
  AND: [QueryFindManyAuthorWhereInput!]
  blog: QueryFindManyAuthorWhereInput
  createdAt: QueryFindManyAuthorFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [QueryFindManyAuthorWhereInput!]
  OR: [QueryFindManyAuthorWhereInput!]
  posts: QueryFindManyAuthorFilter
  rating: FloatFilter
  updatedAt: QueryFindManyAuthorFilter
}

input QueryFindManyPostOrderByInput {
  id: OrderByArg
  title: OrderByArg
}

input QueryFindManyPostWhereInput {
  AND: [QueryFindManyPostWhereInput!]
  author: QueryFindManyPostWhereInput
  blog: QueryFindManyPostWhereInput
  id: IntFilter
  NOT: [QueryFindManyPostWhereInput!]
  OR: [QueryFindManyPostWhereInput!]
  title: StringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
