### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Author {
  blog: Blog!
  id: Int!
  name: String
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [CustomPost!]
}

input AuthorCreateManyWithoutAuthorsInput {
  connect: [AuthorWhereUniqueInput!]
  create: [AuthorCreateWithoutBlogInput!]
}

input AuthorCreateOneWithoutAuthorInput {
  connect: AuthorWhereUniqueInput
  create: AuthorCreateWithoutPostsInput
}

input AuthorCreateWithoutBlogInput {
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input AuthorCreateWithoutPostsInput {
  blog: BlogCreateOneWithoutBlogInput!
  name: String
}

input AuthorWhereUniqueInput {
  id: Int
}

type Blog {
  authors(after: String, before: String, first: Int, last: Int, skip: Int): [Author!]
  createdAt: DateTime!
  id: Int!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: BlogPostsOrderByInput, skip: Int): [CustomPost!]
  updatedAt: DateTime!
  viewCount: Int!
}

input BlogCreateInput {
  authors: AuthorCreateManyWithoutAuthorsInput
  name: String!
  posts: PostCreateManyWithoutPostsInput
  viewCount: Int!
}

input BlogCreateOneWithoutBlogInput {
  connect: BlogWhereUniqueInput
  create: BlogCreateWithoutAuthorsInput
}

input BlogCreateWithoutAuthorsInput {
  name: String!
  posts: PostCreateManyWithoutPostsInput
  viewCount: Int!
}

input BlogPostsOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
  viewCount: OrderByArg
}

input BlogWhereUniqueInput {
  id: Int
}

type CustomPost {
  id: Int!
  tags: [String!]!
  title: String!
}

"""DateTime"""
scalar DateTime

type Mutation {
  createOneBlog(data: BlogCreateInput!): Blog!
}

enum OrderByArg {
  asc
  desc
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutBlogInput!]
}

input PostCreatetagsInput {
  set: [String!]
}

input PostCreateWithoutBlogInput {
  author: AuthorCreateOneWithoutAuthorInput
  tags: PostCreatetagsInput
  title: String!
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  blog(where: BlogWhereUniqueInput!): Blog
  blogs: [Blog!]
  findManyAuthor(after: String, before: String, first: Int, last: Int, skip: Int): [Author!]
  findManyPost(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyPostOrderByInput, skip: Int): [CustomPost!]
}

input QueryFindManyPostOrderByInput {
  id: OrderByArg
  title: OrderByArg
}
